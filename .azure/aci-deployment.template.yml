# .azure/aci-deployment.template.yml
apiVersion: '2021-10-01' # Use a recent, stable API version
location: ${ACI_LOCATION}
name: ${ACI_CONTAINER_GROUP_NAME}
properties:
  containers:
  - name: azuretriall-nginx # Must match the name of your Nginx container
    properties:
      image: ${REGISTRY_LOGIN_SERVER}/azuretriall-nginx:${github.sha} # Using specific SHA for consistency
      ports:
      - port: 80 # Nginx listens on port 80
        protocol: TCP
      resources:
        requests:
          cpu: 1.0
          memoryInGB: 1.5
      # No environment variables needed for Nginx here unless your nginx.conf uses them

  - name: azuretriall-client # Name for your client container
    properties:
      image: ${REGISTRY_LOGIN_SERVER}/azuretriall-frontend:${github.sha} # Correct image name from workflow
      # No PUBLIC ports needed here. Nginx accesses it via localhost:3000.
      # This 'ports' section is for informational purposes and for Nginx to connect.
      ports:
      - port: 3000 # Client app (serve) listens on port 3000
        protocol: TCP
      resources:
        requests:
          cpu: 1.0
          memoryInGB: 1.5
      # The REACT_APP_YOUR_HOSTNAME in docker-compose is not used by your client code.
      # Your client code correctly uses relative URLs like /api/record/,
      # which is the best practice when behind a reverse proxy.
      # So, no specific environment variables needed for the client to find the API here.

  - name: azuretriall-server # Name for your server container
    properties:
      image: ${REGISTRY_LOGIN_SERVER}/azuretriall-backend:${github.sha} # Correct image name from workflow
      # No PUBLIC ports needed here. Nginx accesses it via localhost:5000.
      ports:
      - port: 5000 # Server app listens on port 5000
        protocol: TCP
      resources:
        requests:
          cpu: 1.0
          memoryInGB: 1.5
      environmentVariables:
      - name: ATLAS_URI
        secureValue: ${ATLAS_URI} # Use secureValue if it's a secret, otherwise 'value'
      - name: PORT # If your server.js uses process.env.PORT
        value: '5000'

  osType: Linux
  ipAddress:
    type: Public
    ports:
    - port: 80 # Expose Nginx's port 80 publicly
      protocol: TCP
    dnsNameLabel: ${DNS_NAME_LABEL} # This will be substituted by the workflow

  imageRegistryCredentials:
  - server: ${REGISTRY_LOGIN_SERVER}
    username: ${REGISTRY_USERNAME}
    password: ${REGISTRY_PASSWORD} # This is fine, ACI needs it to pull images

  restartPolicy: Always # Or OnFailure
tags:
  environment: 'production'
  project: 'azuretriall'
type: Microsoft.ContainerInstance/containerGroups